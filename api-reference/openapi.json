{
  "openapi": "3.0.0",
  "info": {
    "title": "ParityDeals API",
    "version": "1.0.0",
    "description": "API for interacting with ParityDeals services, derived from Python SDK documentation."
  },
  "servers": [
    {
      "url": "https://api.paritydeals.com/api/v1",
      "description": "ParityDeals API Server (General - specific operations might override)"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "The Server API Key obtained from the ParityDeals application. Pass as a Bearer token in the Authorization header. Example: 'Authorization: Bearer __YOUR_API_KEY__'"
      }
    },
    "schemas": {
      "CustomerResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Server-generated unique UUID for the customer record.",
            "readOnly": true,
            "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          },
          "customerId": {
            "type": "string",
            "description": "The client-provided customer identifier.",
            "example": "unique-customer-id-123"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The customer's name.",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "description": "The customer's email.",
            "example": "new.customer@example.com"
          },
          "details": {
            "type": "object",
            "additionalProperties": true,
            "description": "Any server-added details about the customer (typically read-only).",
            "readOnly": true,
            "example": {}
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "description": "The metadata associated with the customer.",
            "example": {
              "source": "sdk_import",
              "priority": "high"
            }
          },
          "createdOn": {
            "type": "string",
            "nullable": false,
            "description": "Customer created date and time",
            "example": "2025-06-04T06:03:30.195790Z"
          },
          "modifiedOn": {
            "type": "string",
            "nullable": false,
            "description": "Customer updated date and time",
            "example": "2025-06-04T06:03:30.195790Z"
          }
        }
      },
      "CustomerCreateRequest": {
        "type": "object",
        "required": [
          "customerId"
        ],
        "properties": {
          "customerId": {
            "type": "string",
            "description": "A unique identifier for the customer that you define.",
            "example": "unique-customer-id-456"
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "description": "The email address of the customer.",
            "example": "another.new.customer@example.com"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the customer.",
            "example": "Jane Roe"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "description": "A dictionary of custom key-value pairs.",
            "example": {
              "source": "sdk_import",
              "priority": "low"
            }
          }
        }
      },
      "CustomerUpdateRequest": {
        "type": "object",
        "description": "Fields for updating an existing customer. Only provided fields will be updated.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "description": "The email address of the customer.",
            "example": "jane.roe.updated@example.com"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the customer.",
            "example": "Johnathan Doe"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "description": "A dictionary of custom key-value pairs. If provided, it typically replaces the existing metadata. Refer to API behavior for merge strategy.",
            "example": {
              "source": "sdk_import",
              "priority": "very_high",
              "status": "active"
            }
          }
        }
      },
      "FeatureInput": {
        "type": "object",
        "required": [
          "identifier",
          "quantity"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The unique identifier for the feature.",
            "example": "seats"
          },
          "quantity": {
            "type": "integer",
            "description": "The desired quantity for this feature.",
            "example": 5
          }
        }
      },
      "CreateCheckoutSessionRequest": {
        "type": "object",
        "required": [
          "planIdentifier",
          "successUrl",
          "chargePeriod"
        ],
        "properties": {
          "planIdentifier": {
            "type": "string",
            "description": "The identifier of the specific plan the customer is checking out with.",
            "example": "plan-pro-monthly"
          },
          "successUrl": {
            "type": "string",
            "format": "url",
            "description": "The URL to which the user will be redirected after a successful checkout.",
            "example": "https://paritydeals.com/checkout/success"
          },
          "chargePeriod": {
            "type": "string",
            "description": "The billing cycle for the subscription.",
            "enum": [
              "ONE_TIME",
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "DAILY",
              "THREE_MONTHS",
              "SIX_MONTHS"
            ],
            "example": "MONTHLY"
          },
          "offeringId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "The ID (uuid) of the offering the customer is checking out with.",
            "example": "96d3a293-34ac-48a5-b73d-976b15781afd"
          },
          "pricingTableId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "The ID (uuid) of the pricingTable being used (considered if offeringId is not provided).",
            "example": "6db2717a-4e43-4ae1-a293-6c0a775f6264"
          },
          "ruleId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "The ID (uuid) of the pricing rule being applied (considered if offeringId is not provided).",
            "example": "f2ebc23f-3f79-4cf4-b17e-fe8e30a42ab2"
          },
          "customerId": {
            "type": "string",
            "nullable": true,
            "description": "The ID of the customer initiating the checkout. (If not provided, a new customer might be created depending on server logic).",
            "example": "cust_789"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureInput"
            },
            "nullable": true,
            "description": "A list of features and their desired quantities. SDK documentation notes this as '**Required**', but usage may vary based on examples.",
            "example": [
              {
                "identifier": "seats",
                "quantity": 5
              }
            ]
          },
          "ipAddress": {
            "type": "string",
            "nullable": true,
            "description": "The IP Address of the customer, used for location-based pricing.",
            "example": "103.154.35.20"
          }
        }
      },
      "CreateCheckoutSessionResponse": {
        "type": "object",
        "properties": {
          "checkoutUrl": {
            "type": "string",
            "format": "url",
            "description": "The URL that the customer should be redirected to complete the payment.",
            "example": "https://checkout.stripe.com/c/pay/cs_test_b1sNi7D6u9iMCUFV1UZi9ZaiXKdOOmr3DCUW6XdCZIr5Id1F7#fid..."
          },
          "checkoutSessionId": {
            "type": "string",
            "description": "The unique ID for the created checkout session.",
            "example": "cs_test_b1sNi7D6u9iMCUFV1UZi9ZwerfaiXKdOOmr3DCUW6XdCZIr5Id1F7G"
          }
        }
      },
      "EntitlementDetail": {
        "type": "object",
        "properties": {
          "featureId": {
            "type": "string",
            "example": "advanced-analytics"
          },
          "hasAccess": {
            "type": "boolean",
            "example": true
          },
          "featureType": {
            "type": "string",
            "example": "METER"
          },
          "resetAt": {
            "type": "string",
            "description": "The reset timestamp for the entitlement (e.g., yyyy-MM-dd HH:mm:ss). Not necessarily ISO 8601.",
            "example": "2025-05-22 08:27:45"
          },
          "hardLimit": {
            "type": "boolean",
            "nullable": true,
            "example": false
          },
          "usageLimit": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 3
          },
          "currentUsage": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 0
          },
          "remaining": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 3
          }
        }
      },
      "CheckEntitlementsResponse": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "example": "cust_456"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntitlementDetail"
            }
          }
        }
      },
      "ReportUsageRequest": {
        "type": "object",
        "required": [
          "value",
          "customerId",
          "featureId",
          "behaviour"
        ],
        "properties": {
          "value": {
            "type": "integer",
            "description": "The usage value being reported.",
            "example": 150
          },
          "customerId": {
            "type": "string",
            "description": "Unique identifier for the customer associated with this usage.",
            "example": "customer_001"
          },
          "featureId": {
            "type": "string",
            "description": "Unique identifier for the feature for which usage is being reported.",
            "example": "seats"
          },
          "behaviour": {
            "type": "string",
            "enum": [
              "SET",
              "DELTA"
            ],
            "description": "Dictates how the usage is updated. SET replaces, DELTA increments.",
            "example": "SET"
          }
        }
      },
      "ReportUsageResponse": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "example": 150
          },
          "customerId": {
            "type": "string",
            "example": "customer_001"
          },
          "featureId": {
            "type": "string",
            "example": "seats"
          },
          "behaviour": {
            "type": "string",
            "enum": [
              "SET",
              "DELTA"
            ],
            "example": "SET"
          },
          "orgId": {
            "type": "string",
            "example": "1"
          },
          "eventName": {
            "type": "string",
            "description": "Internal event name (e.g., \"aggregated.usage\").",
            "example": "aggregated.usage"
          },
          "idempotencyKey": {
            "type": "string",
            "description": "Server-generated unique idempotency key for this usage report instance.",
            "example": "597ee95063c744ed9bcc9b1cf5676a8a"
          },
          "timestamp": {
            "type": "string",
            "description": "Server-generated UTC timestamp (e.g., yyyy-MM-dd HH:mm:ss.ffffff) when the report was processed.",
            "example": "2025-05-22 08:27:45.430732"
          }
        }
      },
      "ReportEventRequest": {
        "type": "object",
        "required": [
          "customerId",
          "eventName",
          "idempotencyKey",
          "timestamp"
        ],
        "properties": {
          "customerId": {
            "type": "string",
            "description": "Unique identifier for the customer who performed the event.",
            "example": "customer_002"
          },
          "eventName": {
            "type": "string",
            "description": "Name of the event (e.g., \"user_login\", \"item_purchased\").",
            "example": "api_invoked"
          },
          "idempotencyKey": {
            "type": "string",
            "description": "Client-generated unique key (UUID recommended) to ensure at-most-once processing.",
            "example": "45f05c73-7a0b-44d4-82c6-042816d5645d"
          },
          "timestamp": {
            "type": "string",
            "description": "UTC timestamp when the event occurred (Format: yyyy-MM-dd HH:mm:ss.ffffff).",
            "example": "2025-05-22 07:53:55.747959"
          },
          "properties": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true,
            "description": "Custom key-value pairs associated with the event.",
            "example": {
              "featureId": "api-usage",
              "value": 2
            }
          }
        }
      },
      "ReportEventResponse": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "example": "customer_002"
          },
          "eventName": {
            "type": "string",
            "example": "api_invoked"
          },
          "idempotencyKey": {
            "type": "string",
            "example": "45f05c737a0b44d482c6042816d5645d"
          },
          "timestamp": {
            "type": "string",
            "example": "2025-05-22 07:53:55.747959"
          },
          "properties": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true,
            "example": {
              "featureId": "api-usage",
              "value": 2
            }
          },
          "orgId": {
            "type": "string",
            "example": "1"
          }
        }
      },
      "UpdateSubscriptionRequest": {
        "type": "object",
        "required": [
          "planIdentifier",
          "chargePeriod"
        ],
        "properties": {
          "planIdentifier": {
            "type": "string",
            "description": "The identifier of the new plan.",
            "example": "new_plan_enterprise"
          },
          "chargePeriod": {
            "type": "string",
            "enum": [
              "ONE_TIME",
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "DAILY",
              "THREE_MONTHS",
              "SIX_MONTHS"
            ],
            "description": "The new charging period for the subscription.",
            "example": "YEARLY"
          },
          "offeringId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "The ID of the new offering, if applicable.",
            "example": "e4567-e89b-12d3-a456-426614174000"
          },
          "pricingTableId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "The ID of the new pricingTable, if applicable.",
            "example": "e4567-e89b-12d3-a456-426614174001"
          },
          "ruleId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "The ID of the new pricing rule, if applicable.",
            "example": "e4567-e89b-12d3-a456-426614174002"
          },
          "ipAddress": {
            "type": "string",
            "nullable": true,
            "description": "The IP Address of the customer, for location-based pricing.",
            "example": "103.154.35.20"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureInput"
            },
            "nullable": true,
            "description": "List of features and quantities to update for the subscription.",
            "example": [
              {
                "identifier": "seats",
                "quantity": 10
              }
            ]
          }
        }
      },
      "UpdateSubscriptionResponse": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "example": "dffaf07e-4517-47db-ba3a-59a05aa2d465"
          }
        }
      },
      "CancelSubscriptionRequest": {
        "type": "object",
        "required": [
          "cancellationType"
        ],
        "properties": {
          "cancellationType": {
            "type": "string",
            "enum": [
              "IMMEDIATE",
              "CURRENT_PERIOD_ENDS",
              "SPECIFIC_DATE"
            ],
            "description": "Type of cancellation to perform.",
            "example": "IMMEDIATE"
          },
          "cancellationDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Required if cancellationType is 'SPECIFIC_DATE'. Format: yyyy-MM-dd.",
            "example": "2025-12-31"
          }
        }
      },
      "CancelSubscriptionResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Subscription cancellation processed successfully."
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/customers/": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a customer",
        "description": "Creates a new customer record within ParityDeals.",
        "operationId": "createCustomer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                  "customerId": "unique-customer-id-123",
                  "name": "John Doe",
                  "email": "new.customer@example.com",
                  "details": {},
                  "metadata": {
                    "source": "sdk_import",
                    "priority": "high"
                  },
                  "createdOn": "2025-06-04T06:03:30.195790Z",
                  "modifiedOn": "2025-06-04T06:03:30.195831Z"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/": {
      "patch": {
        "tags": [
          "Customers"
        ],
        "summary": "Update a customer",
        "description": "Performs a partial update on an existing customer using their client-defined `customerId`.",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "description": "The client-defined unique identifier for the customer.",
            "example": "unique-customer-id-123",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                  "customerId": "unique-customer-id-123",
                  "name": "Johnathan Doe",
                  "email": "new.customer@example.com",
                  "details": {},
                  "metadata": {
                    "source": "sdk_import",
                    "priority": "high",
                    "status": "active"
                  },
                  "createdOn": "2025-06-04T06:03:30.195790Z",
                  "modifiedOn": "2025-06-04T06:03:30.195831Z"
                }
              }
            }
          }
        }
      }
    },
    "/checkout/": {
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Create a checkout session",
        "description": "Creates a new checkout session for a customer to proceed with a purchase or subscription.",
        "operationId": "createCheckoutSession",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCheckoutSessionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Checkout Session Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCheckoutSessionResponse"
                },
                "example": {
                  "checkoutUrl": "https://checkout.stripe.com/c/pay/cs_test_b1sNi7D6u9iMCUFV1UZi9ZaiXKdOOmr3DCUW6XdCZIr5Id1F7#fid...",
                  "checkoutSessionId": "cs_test_b1sNi7D6u9iMCUFV1UZi9ZwerfaiXKdOOmr3DCUW6XdCZIr5Id1F7G"
                }
              }
            }
          }
        }
      }
    },
    "/entitlements/": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Retrieve customer entitlements",
        "description": "Retrieves detailed entitlement information for a customer.\n- If `featureId` is provided as a query parameter, returns details for that specific feature.\n- If `featureId` is omitted, returns all entitlements for the customer.\n",
        "operationId": "getCustomerEntitlements",
        "servers": [
          {
            "url": "https://edge.api.paritydeals.com",
            "description": "Edge API for Entitlements"
          }
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "required": true,
            "description": "The unique identifier for the customer.",
            "example": "cust_123",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureId",
            "in": "query",
            "required": false,
            "description": "Optional. The unique identifier for a specific feature. If provided, filters entitlements to this feature.",
            "example": "advanced-analytics",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of entitlement details for the customer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckEntitlementsResponse"
                },
                "examples": {
                  "specificFeatureExample": {
                    "summary": "Example for get_entitlement for a specific feature",
                    "value": {
                      "customerId": "cust_456",
                      "entitlements": [
                        {
                          "featureId": "advanced-analytics",
                          "featureType": "METER",
                          "hasAccess": true,
                          "resetAt": "2025-05-22 08:27:45",
                          "hardLimit": false,
                          "usageLimit": 3,
                          "currentUsage": 0,
                          "remaining": 3
                        }
                      ]
                    }
                  },
                  "allFeaturesExample": {
                    "summary": "Example for get_all_entitlements for a customer",
                    "value": {
                      "customerId": "cust_123",
                      "entitlements": [
                        {
                          "featureId": "advanced-analytics",
                          "featureType": "METER",
                          "hasAccess": true,
                          "resetAt": "2025-05-22 08:27:45",
                          "hardLimit": false,
                          "usageLimit": 3,
                          "currentUsage": 0,
                          "remaining": 3
                        },
                        {
                          "featureId": "basic-reporting",
                          "featureType": "FLAG",
                          "hasAccess": true,
                          "resetAt": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/report/usage/": {
      "post": {
        "tags": [
          "Reporting"
        ],
        "summary": "Report pre-aggregated usage",
        "description": "Reports pre-aggregated feature usage from your application to ParityDeals.",
        "operationId": "reportUsage",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportUsageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Usage reported successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportUsageResponse"
                },
                "example": {
                  "value": 150,
                  "customerId": "customer_001",
                  "featureId": "seats",
                  "behaviour": "SET",
                  "orgId": "1",
                  "eventName": "aggregated.usage",
                  "idempotencyKey": "597ee95063c744ed9bcc9b1cf5676a8a",
                  "timestamp": "2025-05-22 08:27:45.430732"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/update/": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Update a subscription",
        "description": "Updates an existing subscription to a new plan, charge period, and/or features.",
        "operationId": "updateSubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the subscription to be updated. Example UUID from docs: 78058918-9746-4280-9b9b-1bd5115eec6e",
            "example": "78058918-9746-4280-9b9b-1bd5115eec6e",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "UUID of the updated subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSubscriptionResponse"
                },
                "example": {
                  "subscriptionId": "dffaf07e-4517-47db-ba3a-59a05aa2d465"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/cancel/": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Cancel a subscription",
        "description": "Cancels an active subscription for a customer.",
        "operationId": "cancelSubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the subscription to be cancelled. Example UUID from docs: 78058918-9746-4280-9b9b-1bd5115eec6e",
            "example": "78058918-9746-4280-9b9b-1bd5115eec6e",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription cancellation processed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelSubscriptionResponse"
                },
                "example": {
                  "message": "Subscription cancellation processed successfully."
                }
              }
            }
          }
        }
      }
    }
  }
}